from math import *
from kandinsky import *

def decode(n):
  s = n>>15
  m = n&0x7fff
  num = (-1)**s*(m/2048)
  return num

character = str(b'@\xe1\x9e\x85\xc6\x85C\xe1\x8e\x85\xcc\xb3\xe0\xb1\x92\xd4\x8a\xc3\xb6\xd8\xa9@\xe1\x80\xbd\xcf\x83A\xe1\x8e\x9a\xe0\xab\xa1@\xe0\xa2\xa4\xe0\xa3\xa1A\xe0\xac\x8a\xe0\xb7\xac@\xe1\xa5\x9c\xdf\xacC\xe1\x96\x9a\xe0\xa8\xa9\xe0\xb3\x8d\xe0\xb8\xbd\xc5\xb1\xe1\x80\xa9@\xe0\xbf\x97\xe0\xb1\x92C\xe1\x97\x83\xe1\x8f\xac\xe1\xa2\xb8\xe1\xac\xb3\xe1\x8d\x9c\xe2\x8c\xb3A\xe0\xbb\xa1\xe2\x87\xac@\xe1\x8b\x8d\xe1\x82\x8fC\xe0\xb9\xbb\xe1\x90\x80\xe0\xa2\xa4\xe1\x9c\x8a\xc4\x9f\xe1\xa4\xb3@\xe1\x95\xb1\xe1\x98\xa9C\xe1\x85\x88\xe1\xa6\xae\xe0\xa8\x80\xe1\xba\xa4\xc3\x8d\xe2\x85\x88@\xe1\xb1\x92\xce\x9aA\xe3\x8d\x88\xce\x9aA\xe3\x8d\x88\xe1\x88\xa9A\xe2\x8a\xb8\xe1\x88\xa9@\xe1\xb7\xac\xe0\xaa\x8fA\xe2\xb8\xbd\xe0\xaa\x8f@\xe1\xb7\xac\xce\x9aA\xe1\xb7\xac\xe2\x85\x88@\xe1\xa6\xae\xe2\x88\x94A\xe2\xa5\xb1\xe1\xbc\x8a@\xe3\x96\xae\xe1\x99\xbbA\xe2\xbb\xb6\xe1\xb5\xb1@\xe2\xa0\xa9\xe1\x98\xbdA\xe3\x9a\x8f\xe2\x95\xb1@\xe1\x82\xa4\xe2\xa1\x92A\xe1\x83\xa1\xe3\x90\x80C\xe1\x9d\x9c\xe3\x95\xb1\xe2\x84\x8a\xe3\x96\x85\xe2\xae\x85\xe3\x90\x80@\xe0\xa1\xa6\xe2\xa4\x9fB\xdb\x8d\xe2\xb6\x9a\xc7\x83\xe3\x91\xa6@\xe1\xa3\xb6\xe2\x99\xa6A\xe2\x8c\xb3\xe2\xaf\xac@\xe2\xbb\x8d\xe2\xa3\x8dB\xe3\x86\x9a\xe2\xb9\xa6\xe3\x98\xa9\xe3\x91\xbb',"utf-8")

class Bezier():
  def __init__(self,pos):
    self.pos = pos
    self.B, self.dB = self.getf()
  def getf(self):
    p = self.pos
    l = len(p)
    if l == 2: # Linear
      return (lambda t: \
        t*(p[1]-p[0])+p[0]
      , lambda t: \
        p[1]-p[0])
    elif l == 3: # Quadratic
      return (lambda t: \
        t*(t*(p[2]-2*p[1]+p[0])+2*(p[1]-p[0]))+p[0]
      , lambda t: \
        2*(t*(p[2]-2*p[1]+p[0])+p[1]-p[0]))
    elif l == 4: # Cubic
      return (lambda t: \
        t*(t*(t*(p[3]-3*p[2]+3*p[1]-p[0])+3*(p[2]-2*p[1]+p[0]))+3*(p[1]-p[0]))+p[0]
      , lambda t: \
        3*(t*(t*(p[3]-3*p[2]+2*p[1]-p[0])+2*(p[2]-2*p[1]+p[0]))+p[1]-p[0]))
    else:
      raise Exception(p)

def draw(xoff,yoff,scale,xB,yB,xdB,ydB):
  x = xB*scale + xoff
  y = yB*scale + yoff
  set_pixel(int(x),int(y),(0,0,0))

xoff,yoff,scale = 100,50,15

Δt = 0.01
ts = int(1/Δt)

index = 0
while index < len(character):
  char = character[index]
  print(char, index)
  type_ = ord(char)&3
  posnum = ord("\x02\x02\x04\x06"[type_])
  print("MLQC"[type_],posnum)
  index += 1
  pos = character[index:index+posnum]
  print(repr(pos), index, index+posnum)
  pos = [decode(ord(p)) for p in pos]
  print(pos)
  if type_ == 0:
    x,y = pos
    index += 2
    continue
  xBez,yBez = Bezier([x]+pos[::2]),Bezier([y]+pos[1::2])
  for t in range(ts+1):
    t = t*Δt
    #print(t)
    draw(xoff,yoff,scale,xBez.B(t),yBez.B(t),None,None)
  x,y = pos[-2:]
  index += posnum

save_gif()